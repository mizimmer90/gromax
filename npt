#! /usr/bin/python

import argparse
import numpy as np
import os
import subprocess as sp

# arguments
parser = argparse.ArgumentParser()
parser.add_argument("--filename", "-f", help="gromacs start file")
parser.add_argument(
    "--topology", "-p", default='topol.top', help="Gromacs topology file")
parser.add_argument(
    "--threads", "-nt", default="24", type=str,
    help="Number of cores to use for equilibration")
parser.add_argument(
    "--pin", '-P', default=False, action="store_true",
    help="pin threads to cores")
parser.add_argument(
    "--gpu", "-g", default=False, action="store_true",
    help="Optionally run on gpu node")
parser.add_argument(
    "--npt", "-npt", default=None, help="The gromacs simulation file")
parser.add_argument(
    "--integrator", "-i", default="md", choices=["md","sd"],
    help="dynamics integrator")
parser.add_argument(
    "--sim_time", "-s", default=10, type=float, help="simulation time in ns")
parser.add_argument(
    "--timestep", "-t", default=4, type=float, help="simulation timestep in fs")
parser.add_argument(
    "--output_rate", "-or", default=10, type=float,
    help="rate of saving frames in ps")
parser.add_argument(
    "--temp", "-T", default=300, type=float, help="Temperature of simulation")
parser.add_argument(
    "--clones", "-c", default=1, type=int, help="number of clones to spawn")

def npt_script(integrator, sim_time, timestep, output_rate, temp, output_name):
    """Generates a gromacs submission script for running md simulations.
       integrator is the type of simulation engine (md or sd), sim_time is
       the length of simulations in nano seconds, timestep is the simulation
       timestep in femtoseconds, output_rate is the time between storing
       snapshots in picoseconds, and temp is the temperature of the
       simulation."""
    # timestep is in femto-seconds, sim_time is in nanoseconds
    nsteps = int(sim_time/float(timestep)*1000000.) 
    # output_frames is in frame numbers, output_rate is picoseconds,
    # and timestep is femtoseconds, which is converted to picoseconds
    output_frames = output_rate/(timestep/1000.)
    npt = ""+\
        "integrator          = "+integrator+"\n"+\
        "nsteps              = "+str(nsteps)+" ; "+str(sim_time)+" ns\n"+\
        "dt                  = "+str(timestep/1000.)+"\n"+\
        "comm-mode           = linear\n"+\
        "nstcomm             = 5\n"+\
        "\n"+\
        "; CONSTRAINTS\n"+\
        "constraints         = all-bonds\n"+\
        "lincs_iter          = 2\n"+\
        "lincs_order         = 6\n"+\
        "\n"+\
        "; NEIGHBORSEARCHING PARAMETERS\n"+\
        "ns_type             = grid\n"+\
        "nstlist             = 10\n"+\
        "rlist               = 1.1\n"+\
        "pbc                 = xyz\n"+\
        "cutoff-scheme       = Verlet\n"+\
        "\n"+\
        "; ELECTROSTATICS\n"+\
        "coulombtype         = pme\n"+\
        "rcoulomb            = 0.9\n"+\
        "fourierspacing      = 0.12\n"+\
        "fourier_nx          = 0\n"+\
        "fourier_ny          = 0\n"+\
        "fourier_nz          = 0\n"+\
        "pme_order           = 4\n"+\
        "ewald_rtol          = 1e-5\n"+\
        "ewald_geometry      = 3d\n"+\
        "optimize_fft        = yes\n"+\
        "\n"+\
        "; VDW\n"+\
        "vdw-type            = cut-off\n"+\
        "rvdw                = 0.9\n"+\
        "DispCorr            = EnerPres\n"+\
        "\n"+\
        "; Output control\n"+\
        "nstxout             = 0\n"+\
        "nstvout             = 0\n"+\
        "nstfout             = 0\n"+\
        "nstlog              = 0\n"+\
        "nstxtcout           = "+str(output_frames)+"   ; "+str(output_rate)+" ps\n"+\
        ";xtc-grps            = Prot-Masses\n"+\
        "energygrps          = System\n"+\
        "nstenergy           = "+str(output_frames)+"   ; "+str(output_rate)+" ps\n"+\
        "nstcalcenergy       = 1\n"+\
        "\n"+\
        "verlet-buffer-drift = -1\n"+\
        "Tcoupl              = v-rescale\n"+\
        "tau_t               = 0.1\n"+\
        "tc-grps             = System\n"+\
        "ref_t               = "+str(temp)+"\n"+\
        "ld_seed             = -1\n"+\
        "\n"+\
        "Pcoupl              = Parrinello-Rahman\n"+\
        "Pcoupltype          = isotropic\n"+\
        "tau_p               = 1\n"+\
        "compressibility     = 4.5e-5\n"+\
        "ref_p               = 1.0\n"+\
        "refcoord-scaling    = all\n"+\
        "\n"+\
        "gen_vel             = yes\n"+\
        "gen_temp            = "+str(temp)+"\n"
    npt_file = open(output_name, 'w')
    npt_file.write(npt)
    npt_file.close()
    return

def run_commands(cmds):
    for cmd in cmds:
        p = sp.Popen(cmd, shell=True, stdout=sp.PIPE, stderr=sp.PIPE)
        output,err = p.communicate()
        print(output)
        print(err)
    return

def generate_qsub(gpu, threads, filename, pr, topology, pin):
    # header
    header = "#!/bin/bash\n"+\
        "#$ -N gromax_md\n"+\
        "#$ -S /bin/bash\n"+\
        "#$ -cwd\n"+\
        "#$ -o run.out\n"+\
        "#$ -e run.err\n"
    # if gpu, add cuda and gpu q
    if gpu:
        header += "#$ -q gpu.q\n"+\
            "#$ -l h_rt=500:00:00,cuda=1\n"
    else:
        header += "#$ -q all.q\n"+\
            "#$ -l h_rt=500:00:00\n"
    header += "#$ -V\n"+\
        "#$ -pe smp "+threads+"\n\n"
    # if gpu, source gpu gromacs
    if gpu:
        header += "source /home/shared/Installations/gpu_gromacs511_bash\n\n"
    # gromacs simulation commands
    sim_commands = "gmx grompp -f "+pr+" "+\
        "-c "+filename+" -p "+topology+" -o md -maxwarn 1\n"+\
        "gmx mdrun -s md -o md -c after_equil -v -nt "+threads+" -ntmpi 1 "+\
        "-ntomp "+threads+" -x after_equil"
    if pin:
        sim_commands += " -pin on"
    sim_commands += "\n"
    # trjconv
    trjconv_commands = "echo '10 0' | gmx trjconv -f after_equil.xtc "+\
        "-o after_equil_aligned.xtc -s md.tpr -pbc mol -ur compact -cetner\n"
    trjconv_commands += "echo '10 0' | gmx trjconv -f after_equil.gro "+\
        "-o after_equil_aligned.gro -s md.tpr -pbc mol -ur compact -center\n"
    # generate file
    file_contents = header + sim_commands + trjconv_commands
    qsub_filename = 'pbs_gpu_equil' if gpu else 'pbs_cpu_equil'
    qsub_file = open(qsub_filename, 'w')
    qsub_file.write(file_contents)
    qsub_file.close()
    return qsub_filename

# main function
def entry_point():

    # parse arguments
    args = parser.parse_args()
    filename = os.path.abspath(args.filename)
    topology = os.path.abspath(args.topology)
    threads = args.threads
    pin = args.pin
    gpu = args.gpu
    npt = args.npt
    integrator = args.integrator
    sim_time = args.sim_time
    timestep = args.timestep
    output_rate = args.output_rate
    temp = args.temp
    clones = args.clones
    # if npt is not supplied, make it the default in grompp_scripts
    if npt is None:
        npt_script(
            integrator, sim_time, timestep, output_rate, temp,
            output_name="npt.mdp")
        npt = os.path.abspath("npt.mdp")
    home_directory = os.path.abspath("./")
    # if clones is greater than 1, submit jobs in clone folders
    if clones > 1:
        cmds = ['mkdir CLONE'+str(num) for num in range(clones)]
        run_commands(cmds)
        for num in range(clones):
            os.chdir("CLONE"+str(num))
            qsub_filename = generate_qsub(
                gpu, threads, filename, npt, topology, pin)
            cmd = 'qsub '+qsub_filename
            run_commands([cmd])
            os.chdir(home_directory)
    else:
        # submit single job in home directory
        qsub_filename = generate_qsub(
            gpu, threads, filename, npt, topology, pin)
        cmd = 'qsub '+qsub_filename
        run_commands([cmd])
        
# starting site
if __name__=='__main__':
    entry_point()

